/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.example.petstore.implementation;

import com.example.petstore.SwaggerPetstore;
import com.microsoft.rest.ServiceClient;
import com.microsoft.rest.RestClient;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;
import com.example.petstore.models.ErrorException;
import com.example.petstore.models.ListPetsHeaders;
import com.example.petstore.models.Pet;
import com.google.common.reflect.TypeToken;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.ServiceResponseWithHeaders;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.GET;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * Initializes a new instance of the SwaggerPetstore class.
 */
public class SwaggerPetstoreImpl extends ServiceClient implements SwaggerPetstore {
    /**
     * The Retrofit service to perform REST calls.
     */
    private SwaggerPetstoreService service;

    /**
     * Initializes an instance of SwaggerPetstore client.
     */
    public SwaggerPetstoreImpl() {
        this("http://petstore.swagger.io/v1");
    }

    /**
     * Initializes an instance of SwaggerPetstore client.
     *
     * @param baseUrl the base URL of the host
     */
    public SwaggerPetstoreImpl(String baseUrl) {
        super(baseUrl);
        initialize();
    }

    /**
     * Initializes an instance of SwaggerPetstore client.
     *
     * @param clientBuilder the builder for building an OkHttp client, bundled with user configurations
     * @param restBuilder the builder for building an Retrofit client, bundled with user configurations
     */
    public SwaggerPetstoreImpl(OkHttpClient.Builder clientBuilder, Retrofit.Builder restBuilder) {
        this("http://petstore.swagger.io/v1", clientBuilder, restBuilder);
        initialize();
    }

    /**
     * Initializes an instance of SwaggerPetstore client.
     *
     * @param baseUrl the base URL of the host
     * @param clientBuilder the builder for building an OkHttp client, bundled with user configurations
     * @param restBuilder the builder for building an Retrofit client, bundled with user configurations
     */
    public SwaggerPetstoreImpl(String baseUrl, OkHttpClient.Builder clientBuilder, Retrofit.Builder restBuilder) {
        super(baseUrl, clientBuilder, restBuilder);
        initialize();
    }

    /**
     * Initializes an instance of SwaggerPetstore client.
     *
     * @param restClient the REST client containing pre-configured settings
     */
    public SwaggerPetstoreImpl(RestClient restClient) {
        super(restClient);
        initialize();
    }

    private void initialize() {
        initializeService();
    }

    private void initializeService() {
        service = retrofit().create(SwaggerPetstoreService.class);
    }

    /**
     * The interface defining all the services for SwaggerPetstore to be
     * used by Retrofit to perform actually REST calls.
     */
    interface SwaggerPetstoreService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.example.petstore.SwaggerPetstore listPets" })
        @GET("pets")
        Observable<Response<ResponseBody>> listPets(@Query("limit") Integer limit);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.example.petstore.SwaggerPetstore createPets" })
        @POST("pets")
        Observable<Response<ResponseBody>> createPets();

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.example.petstore.SwaggerPetstore showPetById" })
        @GET("pets/{petId}")
        Observable<Response<ResponseBody>> showPetById(@Path("petId") String petId);

    }

    /**
     * List all pets.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;Pet&gt; object if successful.
     */
    public List<Pet> listPets() {
        return listPetsWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * List all pets.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<Pet>> listPetsAsync(final ServiceCallback<List<Pet>> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(listPetsWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * List all pets.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Pet&gt; object
     */
    public Observable<List<Pet>> listPetsAsync() {
        return listPetsWithServiceResponseAsync().map(new Func1<ServiceResponseWithHeaders<List<Pet>, ListPetsHeaders>, List<Pet>>() {
            @Override
            public List<Pet> call(ServiceResponseWithHeaders<List<Pet>, ListPetsHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * List all pets.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Pet&gt; object
     */
    public Observable<ServiceResponseWithHeaders<List<Pet>, ListPetsHeaders>> listPetsWithServiceResponseAsync() {
        final Integer limit = null;
        return service.listPets(limit)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<List<Pet>, ListPetsHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<List<Pet>, ListPetsHeaders>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponseWithHeaders<List<Pet>, ListPetsHeaders> clientResponse = listPetsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * List all pets.
     *
     * @param limit How many items to return at one time (max 100)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;Pet&gt; object if successful.
     */
    public List<Pet> listPets(Integer limit) {
        return listPetsWithServiceResponseAsync(limit).toBlocking().single().body();
    }

    /**
     * List all pets.
     *
     * @param limit How many items to return at one time (max 100)
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<Pet>> listPetsAsync(Integer limit, final ServiceCallback<List<Pet>> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(listPetsWithServiceResponseAsync(limit), serviceCallback);
    }

    /**
     * List all pets.
     *
     * @param limit How many items to return at one time (max 100)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Pet&gt; object
     */
    public Observable<List<Pet>> listPetsAsync(Integer limit) {
        return listPetsWithServiceResponseAsync(limit).map(new Func1<ServiceResponseWithHeaders<List<Pet>, ListPetsHeaders>, List<Pet>>() {
            @Override
            public List<Pet> call(ServiceResponseWithHeaders<List<Pet>, ListPetsHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * List all pets.
     *
     * @param limit How many items to return at one time (max 100)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Pet&gt; object
     */
    public Observable<ServiceResponseWithHeaders<List<Pet>, ListPetsHeaders>> listPetsWithServiceResponseAsync(Integer limit) {
        return service.listPets(limit)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<List<Pet>, ListPetsHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<List<Pet>, ListPetsHeaders>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponseWithHeaders<List<Pet>, ListPetsHeaders> clientResponse = listPetsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponseWithHeaders<List<Pet>, ListPetsHeaders> listPetsDelegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return this.restClient().responseBuilderFactory().<List<Pet>, ErrorException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<List<Pet>>() { }.getType())
                .registerError(ErrorException.class)
                .buildWithHeaders(response, ListPetsHeaders.class);
    }

    /**
     * Create a pet.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void createPets() {
        createPetsWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Create a pet.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> createPetsAsync(final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(createPetsWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Create a pet.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> createPetsAsync() {
        return createPetsWithServiceResponseAsync().map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Create a pet.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> createPetsWithServiceResponseAsync() {
        return service.createPets()
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = createPetsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> createPetsDelegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return this.restClient().responseBuilderFactory().<Void, ErrorException>newInstance(this.serializerAdapter())
                .register(201, new TypeToken<Void>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Info for a specific pet.
     *
     * @param petId The id of the pet to retrieve
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;Pet&gt; object if successful.
     */
    public List<Pet> showPetById(String petId) {
        return showPetByIdWithServiceResponseAsync(petId).toBlocking().single().body();
    }

    /**
     * Info for a specific pet.
     *
     * @param petId The id of the pet to retrieve
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<Pet>> showPetByIdAsync(String petId, final ServiceCallback<List<Pet>> serviceCallback) {
        return ServiceFuture.fromResponse(showPetByIdWithServiceResponseAsync(petId), serviceCallback);
    }

    /**
     * Info for a specific pet.
     *
     * @param petId The id of the pet to retrieve
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Pet&gt; object
     */
    public Observable<List<Pet>> showPetByIdAsync(String petId) {
        return showPetByIdWithServiceResponseAsync(petId).map(new Func1<ServiceResponse<List<Pet>>, List<Pet>>() {
            @Override
            public List<Pet> call(ServiceResponse<List<Pet>> response) {
                return response.body();
            }
        });
    }

    /**
     * Info for a specific pet.
     *
     * @param petId The id of the pet to retrieve
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Pet&gt; object
     */
    public Observable<ServiceResponse<List<Pet>>> showPetByIdWithServiceResponseAsync(String petId) {
        if (petId == null) {
            throw new IllegalArgumentException("Parameter petId is required and cannot be null.");
        }
        return service.showPetById(petId)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<Pet>>>>() {
                @Override
                public Observable<ServiceResponse<List<Pet>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<List<Pet>> clientResponse = showPetByIdDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<List<Pet>> showPetByIdDelegate(Response<ResponseBody> response) throws ErrorException, IOException, IllegalArgumentException {
        return this.restClient().responseBuilderFactory().<List<Pet>, ErrorException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<List<Pet>>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

}
